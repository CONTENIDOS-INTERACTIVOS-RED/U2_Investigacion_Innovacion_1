{"remainingRequest":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/src/views/curso/Tema1.vue?vue&type=template&id=c6126ef6&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/src/views/curso/Tema1.vue","mtime":1735008795998},{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Innovacion_1/U2_Investigacion_Innovacion_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gQ3JlYXRpdmlkYWQgZSBpbm5vdmFjacOzbiciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucHgtNC5wdC00LnB4LW1kLTUucHQtbWQtNS5wYi0wLm92ZXJmbG93LWhpZGRlbgogICAgLmJnLWNvbG9yLTQubWItNShkYXRhLWFvcz0iZmFkZS11cCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNDMkYxRjgiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZwogICAgICAgICAgLnAtNAogICAgICAgICAgICBwLm1iLTAoZGF0YS1hb3M9ImZhZGUtdXAiKSBFbiBzdSB0cmFiYWpvLCBlcyBmdW5kYW1lbnRhbCBlbnRlbmRlciBhIGZvbmRvIGxvcyBjb25jZXB0b3MgZGUgaW5ub3ZhY2nDs24geSBjcmVhdGl2aWRhZC4gQXVucXVlIGVzdMOhbiBpbnRlcnJlbGFjaW9uYWRvcywgcG9zZWVuIGNhcmFjdGVyw61zdGljYXMgw7puaWNhcyBxdWUgZXMgaW1wb3J0YW50ZSByZWNvbm9jZXIuIERlIGFjdWVyZG8gY29uIE1pcmFuZGEgR29uesOhbGV6LCDigJxjb25vY2VyIGEgZm9uZG8gZWwgbcOpdG9kbyB5IGVsIHN1cmdpbWllbnRvIGRlIGxhIGlubm92YWNpw7NuIHkgbGEgY3JlYXRpdmlkYWQgZXMgY3J1Y2lhbCBwYXJhIGxhIGFkb3BjacOzbiBhZGVjdWFkYSBkZSBlc3RvcyBwcm9jZXNvcyBlbiBsb3MgY29udGV4dG9zIGRlIGxhIG9yZ2FuaXphY2nDs27igJ0uIFBvciBsbyB0YW50bywgYWwgZG9taW5hciBlc3RhIGJhc2UgY29uY2VwdHVhbCwgcG9kcsOhIGltcHVsc2FyIGxhIGlubm92YWNpw7NuIHkgbGEgY3JlYXRpdmlkYWQgZGUgbWFuZXJhIGVzdHJhdMOpZ2ljYSBlbiBzdSBsdWdhciBkZSB0cmFiYWpvLiAKICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zLnBuZycsIGFsdD0nJykKICAgIC50aXR1bG8tZmlndXJhLm1iLTIoZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoNSBGaWd1cmEgMS4KICAgICAgc3BhbiBGdW5kYW1lbnRvcyBkZSBpbm5vdmFjacOzbgogICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNC5zdmcnLCBhbHQ9JycpCgogICAgI3RfMV8zLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikubXktNQogICAgICBoMiAjW3NwYW4gMS4xXSBJbm5vdmFjacOzbiB5IGNyZWF0aXZpZGFkOiBlbGVtZW50b3MgZnVuZGFtZW50YWxlcyB5IGFwbGljYWNpb25lcyBwcsOhY3RpY2FzCgogICAgLmJnLWNvbG9yLTQubWItNShkYXRhLWFvcz0iZmFkZS11cCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNDMkYxRjgiKQogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZwogICAgICAgICAgLnAtNAogICAgICAgICAgICBwLm1iLTAoZGF0YS1hb3M9ImZhZGUtdXAiKSBMYSBpbm5vdmFjacOzbiB5IGxhIGNyZWF0aXZpZGFkIHNvbiBwaWxhcmVzIGVzZW5jaWFsZXMgcGFyYSBlbCBwcm9ncmVzbyB5IGxhIGFkYXB0YWNpw7NuIGRlIGxhcyBvcmdhbml6YWNpb25lcyBlbiB1biBtdW5kbyBkaW7DoW1pY28geSBjb21wZXRpdGl2by4gRXN0YXMgbm9jaW9uZXMgaW5jbHV5ZW4gZGltZW5zaW9uZXMgZXN0cnVjdHVyYWxlcywgZXN0cmF0w6lnaWNhcyB5IGNvbnRleHR1YWxlcywgYXPDrSBjb21vIGFwbGljYWNpb25lcyBwcsOhY3RpY2FzIGVuIGRpdmVyc29zIHNlY3RvcmVzLgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzUucG5nJywgYWx0PScnKQoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTEubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIGgzIEVsZW1lbnRvcyBlc3RydWN0dXJhbGVzCiAgICAgICAgcC5tYi00IExhIGlubm92YWNpw7NuIHNlIGZ1bmRhbWVudGEgZW4gbGEgaW5mcmFlc3RydWN0dXJhIHRlY25vbMOzZ2ljYSB5IGVsIHRhbGVudG8gaHVtYW5vLiBQw6lyZXogQ2FsbGUgKDIwMjMpIHkgSGVycmVyYSBMZW11cyB5IExhemNhbm8gSGVycmVyYSAoMjAyMCkgZGVzdGFjYW4gc3UgaW1wb3J0YW5jaWEgZW4gdMOpcm1pbm9zIGRlIGNhcGFjaWRhZGVzIHTDqWNuaWNhcywgaGVycmFtaWVudGFzIHkgY29tcGV0ZW5jaWFzLgogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzYucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDQubWItMiBCYXNlIHRlY25vbMOzZ2ljYQkKICAgICAgICAgICAgICAgIHAubWItMCBJbmZyYWVzdHJ1Y3R1cmEgdGVjbm9sw7NnaWNhLCBjYXBhY2lkYWRlcyB0w6ljbmljYXMsIGhlcnJhbWllbnRhcyBkZSBkZXNhcnJvbGxvLCBzaXN0ZW1hcyBkZSBnZXN0acOzbiwgcGxhdGFmb3JtYXMgZGUgaW5ub3ZhY2nDs24KICAgICAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkLmgtMTAwCiAgICAgICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzcucG5nIiBhbHQ9IiIpCiAgICAgICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICAgICAgaDQubWItMiBDYXBpdGFsIGh1bWFubwogICAgICAgICAgICAgICAgcC5tYi0wIENvbXBldGVuY2lhcyBjbGF2ZSwgcGVuc2FtaWVudG8gaW5ub3ZhZG9yLCBjYXBhY2lkYWQgZGUgYWRhcHRhY2nDs24sIHRyYWJham8gY29sYWJvcmF0aXZvLCBnZXN0acOzbiBkZWwgY2FtYmlvLgogICAgaDMgRGltZW5zaW9uZXMgZGUgbGEgaW5ub3ZhY2nDs24KICAgIHAubWItNCBMYXMgZGltZW5zaW9uZXMgZGUgbGEgaW5ub3ZhY2nDs24gYWJvcmRhbiBkaXN0aW50b3MgYXNwZWN0b3Mgb3JnYW5pemF0aXZvcywgdGVjbm9sw7NnaWNvcyB5IHNvY2lhbGVzIHF1ZSBmb3J0YWxlY2VuIGVsIGRlc2Fycm9sbG8geSBsYSBzb3N0ZW5pYmlsaWRhZC4KICAgIC5iZy1mdWxsLXdpZHRoLmJnLXNseWRlci5wLTUubWItNQogICAgICBTbHlkZXJBKHRpcG89J2InKS5iZy13aGl0ZQogICAgICAgIC5yb3cucC01CiAgICAgICAgICAuY29sLWxnLTYubWItNC5tYi1tZC0wCiAgICAgICAgICAgIGg0IEVzdHJhdMOpZ2ljYQogICAgICAgICAgICBwIEFsaW5lYWNpw7NuIGNvbiBvYmpldGl2b3Mgb3JnYW5pemFjaW9uYWxlcywgcGxhbmlmaWNhY2nDs24gYSBsYXJnbyBwbGF6bywgbWVkaWNpw7NuIGRlIGltcGFjdG8uCiAgICAgICAgICAuY29sLWxnLTYuY29sLTcKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvOC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgIC5yb3cucC01CiAgICAgICAgICAuY29sLWxnLTYubWItNC5tYi1tZC0wCiAgICAgICAgICAgIGg0IFRlY25vbMOzZ2ljYQogICAgICAgICAgICBwIFBsYXRhZm9ybWFzIHRlY25vbMOzZ2ljYXMsIGdlc3Rpw7NuIGRlIGRhdG9zLCBzZWd1cmlkYWQgZGlnaXRhbC4KICAgICAgICAgIC5jb2wtbGctNi5jb2wtNwogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy85LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgT3JnYW5pemFjaW9uYWwKICAgICAgICAgICAgcCBDdWx0dXJhIGlubm92YWRvcmEsIGRpc2XDsW8gb3JnYW5pemFjaW9uYWwsIHRvbGVyYW5jaWEgYWwgZXJyb3IsIGFwcmVuZGl6YWplIGNvbnRpbnVvLgogICAgICAgICAgLmNvbC1sZy02LmNvbC03CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzEwLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgSHVtYW5hCiAgICAgICAgICAgIHAgUGVuc2FtaWVudG8gY3JlYXRpdm8sIHByb2dyYW1hcyBkZSBmb3JtYWNpw7NuLCBtZW50b3JpbmcsIGV2YWx1YWNpw7NuIGNvbnRpbnVhLgogICAgICAgICAgLmNvbC1sZy02LmNvbC03CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzExLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgRGUgbWVyY2FkbwogICAgICAgICAgICBwICBPcmllbnRhY2nDs24gYWwgY2xpZW50ZSwgaW52ZXN0aWdhY2nDs24gZGUgbWVyY2FkbywgdmVudGFqYXMgY29tcGV0aXRpdmFzLCBlc2NhbGFiaWxpZGFkLgogICAgICAgICAgLmNvbC1sZy02LmNvbC03CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzEyLnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgU29jaWFsCiAgICAgICAgICAgIHAgw4l0aWNhIGVtcHJlc2FyaWFsLCBpbXBhY3RvIGFtYmllbnRhbCwgZXF1aWRhZCBzb2NpYWwsIGdvYmVybmFuemEgcmVzcG9uc2FibGUuCiAgICAgICAgICAuY29sLWxnLTYuY29sLTcKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTMucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgICAucm93LnAtNQogICAgICAgICAgLmNvbC1sZy02Lm1iLTQubWItbWQtMAogICAgICAgICAgICBoNCBEZSBwcm9jZXNvcwogICAgICAgICAgICBwIE9wdGltaXphY2nDs24sIGF1dG9tYXRpemFjacOzbiwgbWVqb3JhIGNvbnRpbnVhLgogICAgICAgICAgLmNvbC1sZy02LmNvbC03CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzE0LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNi5tYi00Lm1iLW1kLTAKICAgICAgICAgICAgaDQgRGUgY29ub2NpbWllbnRvCiAgICAgICAgICAgIHAgR2VzdGnDs24geSBkZXNhcnJvbGxvIGRlbCBjb25vY2ltaWVudG8sIHRyYW5zZmVyZW5jaWEgZGUgYXByZW5kaXphamVzLCB2YWxpZGFjacOzbiBkZSBjb25jZXB0b3MuCiAgICAgICAgICAuY29sLWxnLTYuY29sLTcKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTUucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgIGgzIENyZWF0aXZpZGFkOiBkaW1lbnNpb25lcyBjbGF2ZQogICAgcC5tYi00IExhIGNyZWF0aXZpZGFkIGNvbXBsZW1lbnRhIGxhIGlubm92YWNpw7NuIGFsIGdlbmVyYXIgaWRlYXMgeSBzb2x1Y2lvbmVzIHF1ZSBwcm9tdWV2ZW4gY2FtYmlvcyBvcmdhbml6YXRpdm9zIHkgc29jaWFsZXMuIFNlZ8O6biBDYXZhem9zIEFycm95byAoMjAyMSksIGxhIGNyZWF0aXZpZGFkIGVzIHVuIGZlbsOzbWVubyBtdWx0aWRpbWVuc2lvbmFsLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy04Lm1iLWxnLTAubWItbWItMwogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSIxIiB0aXR1bG89IkNvZ25pdGl2YSIpIFBlbnNhbWllbnRvIGRpdmVyZ2VudGUsIGZsZXhpYmlsaWRhZCBjb2duaXRpdmEsIHJlc29sdWNpw7NuIGRlIHByb2JsZW1hcywgZmx1aWRleiBkZSBpZGVhcy4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjIiIHRpdHVsbz0iRW1vY2lvbmFsIikgTW90aXZhY2nDs24gaW50csOtbnNlY2EsIHJlc2lsaWVuY2lhIGVtb2Npb25hbCwgcmVndWxhY2nDs24gZGUgZW1vY2lvbmVzLgogICAgICAgICAgcC50ZXh0LXNtYWxsKG51bWVybz0iMyIgdGl0dWxvPSJTb2NpYWwiKSBDb2xhYm9yYWNpw7NuIGVmZWN0aXZhLCByZXRyb2FsaW1lbnRhY2nDs24gY29uc3RydWN0aXZhLCBpbnRlcmNhbWJpbyBkZSBpZGVhcy4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjQiIHRpdHVsbz0iQ3VsdHVyYWwiKSBEaXZlcnNpZGFkIGRlIHBlcnNwZWN0aXZhcywgc2Vuc2liaWxpZGFkIGN1bHR1cmFsLCBpbnRlZ3JhY2nDs24gZGUgc2FiZXJlcy4KICAgICAgLmNvbC1sZy00LmNvbC03OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNi5wbmcnLCBhbHQ9JycpCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNy5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSI1IiB0aXR1bG89Ik9yZ2FuaXphY2lvbmFsIikgQ2xpbWEgY3JlYXRpdm8sIHJlY3Vyc29zIGFkZWN1YWRvcywgbGlkZXJhemdvIGZhY2lsaXRhZG9yLCBlc3BhY2lvcyBkZSBleHBlcmltZW50YWNpw7NuLiAKICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjYiIHRpdHVsbz0iUGVyc29uYWwiKSBDdXJpb3NpZGFkLCBpbmRlcGVuZGVuY2lhIGRlIHBlbnNhbWllbnRvLCBhdXRvcnJlZmxleGnDs24sIGF1dG9lZmljYWNpYSBjcmVhdGl2YS4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjciIHRpdHVsbz0iVMOpY25pY2EiKSBEb21pbmlvIGRlIGhlcnJhbWllbnRhcywgY29ub2NpbWllbnRvcyBlc3BlY8OtZmljb3MsIGhhYmlsaWRhZGVzIGVzcGVjaWFsaXphZGFzLgogICAgICAgICAgcC50ZXh0LXNtYWxsKG51bWVybz0iOCIgdGl0dWxvPSJUZW1wb3JhbCIpIEdlc3Rpw7NuIGRlbCB0aWVtcG8sIG1vbWVudG9zIGRlIGluc3BpcmFjacOzbiwgZmFzZXMgZGVsIHByb2Nlc28gY3JlYXRpdm8uCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLTEubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIGgzIEFwbGljYWNpb25lcyBkZSBsYSBpbm5vdmFjacOzbiB5IGNyZWF0aXZpZGFkCiAgICAgICAgcC5tYi00IEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIGVqZW1wbG9zIHByw6FjdGljb3MgcXVlIGlsdXN0cmFuIGPDs21vIGxhIGlubm92YWNpw7NuIHkgbGEgY3JlYXRpdmlkYWQgaW1wdWxzYW4gc29sdWNpb25lcyBlbiBkaXZlcnNvcyBzZWN0b3Jlcy4KICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgICAgICAuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTguc3ZnIgogICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIGg0LnRleHQtY2VudGVyIEVkdWNhY2nDs24KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgTGFib3JhdG9yaW9zIHZpcnR1YWxlcywgZXZhbHVhY2nDs24gYWRhcHRhdGl2YSwgdHV0b3LDrWFzIHBlcnNvbmFsaXphZGFzLCBhY3RpdmlkYWRlcyBjb2xhYm9yYXRpdmFzIGVuIGzDrW5lYS4KICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xOS5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIgQmFuY2EKICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgU29sdWNpb25lcyBtw7N2aWxlcyBwZXJzb25hbGl6YWRhcywgc2VndXJpZGFkIGJpb23DqXRyaWNhLCBpbnRlcmZhY2VzIGNlbnRyYWRhcyBlbiBlbCB1c3VhcmlvLgogICAgICAgICAgLmNvbC1sZy0zLm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzIwLnN2ZyIKICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgICBoNC50ZXh0LWNlbnRlciBTYWx1ZAogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBUZWxlbWVkaWNpbmEsIGRpYWduw7NzdGljbyBhc2lzdGlkbyBwb3IgSUEsIGRpc3Bvc2l0aXZvcyB3ZWFyYWJsZXMgLCBwbGF0YWZvcm1hcyBkZSBnZXN0acOzbiBpbnRlZ3JhbCBkZSBzYWx1ZC4KICAgICAgICAgIC5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMS5zdmciCiAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgaDQudGV4dC1jZW50ZXIgSW5kdXN0cmlhCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEF1dG9tYXRpemFjacOzbiBkZSBwcm9jZXNvcywgbWFudGVuaW1pZW50byBwcmVkaWN0aXZvLCB0cmF6YWJpbGlkYWQsIGdlc3Rpw7NuIGludGVsaWdlbnRlIGRlIGludmVudGFyaW9zLgogICAgcC5tYi00IExhIGlubm92YWNpw7NuIHkgbGEgY3JlYXRpdmlkYWQgc29uIGhlcnJhbWllbnRhcyB0cmFuc2Zvcm1hZG9yYXMgcXVlIHBlcm1pdGVuIGEgbGFzIG9yZ2FuaXphY2lvbmVzIGVuZnJlbnRhciBkZXNhZsOtb3MgeSBhZGFwdGFyc2UgYSB1biBlbnRvcm5vIGNhbWJpYW50ZS4gU3VzIG3Dumx0aXBsZXMgZGltZW5zaW9uZXMgb2ZyZWNlbiB1bmEgYmFzZSBzw7NsaWRhIHBhcmEgZWwgZGVzYXJyb2xsbyBzb3N0ZW5pYmxlLCBsYSBjb21wZXRpdGl2aWRhZCB5IGVsIGltcGFjdG8gc29jaWFsLCBwcm9tb3ZpZW5kbyB1bmEgdmlzacOzbiBpbnRlZ3JhZGEgZGVsIHByb2dyZXNvIG9yZ2FuaXphY2lvbmFsIHkgY3VsdHVyYWwuCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0yLm1iLWxnLTUoc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNFN0VGRjgiKQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIFJlbGFjacOzbiBlbnRyZSBjcmVhdGl2aWRhZCBlIGlubm92YWNpw7NuCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIExhIGNyZWF0aXZpZGFkIHkgbGEgaW5ub3ZhY2nDs24sIGNvbW8gc2UgZGVzY3JpYmUgZW4gZWwgZG9jdW1lbnRvIFJlbGFjacOzbiBlbnRyZSBjcmVhdGl2aWRhZCBlIGlubm92YWNpw7NuICwgZnVuY2lvbmFuIGRlIG1hbmVyYSBpbnRlcmRlcGVuZGllbnRlLiBMYSBjcmVhdGl2aWRhZCBnZW5lcmEgaWRlYXMgb3JpZ2luYWxlcywgbWllbnRyYXMgcXVlIGxhIGlubm92YWNpw7NuIGxhcyB0cmFuc2Zvcm1hIGVuIHNvbHVjaW9uZXMgdmlhYmxlcyB5IGFwbGljYWJsZXMuIEVzdGUgcHJvY2VzbyBkaW7DoW1pY28gaW1wYWN0YSBlbiBsb3Mgbml2ZWxlcyBlc3RyYXTDqWdpY28sIHTDoWN0aWNvIHkgb3BlcmF0aXZvIGRlIGxhcyBvcmdhbml6YWNpb25lcywgZm9tZW50YW5kbyBlbCBkZXNhcnJvbGxvIHkgZWwgYXZhbmNlIGNvbXBldGl0aXZvLiBTZSBpbnZpdGEgYSBleHBsb3JhciBjw7NtbyBhcGxpY2FyIGVzdGEgaW50ZXJhY2Npw7NuIGVuIGNvbnRleHRvcyBwcsOhY3RpY29zIHBhcmEgaW1wdWxzYXIgbGEgaW5ub3ZhY2nDs24gZW4gZGl2ZXJzb3Mgc2VjdG9yZXMuIMKhQ29ub2NlIG3DoXMgc29icmUgZXN0YSBjb25leGnDs24gZXNlbmNpYWwgeSBzdSBpbXBhY3RvIG9yZ2FuaXphY2lvbmFsIQoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBSZWxhY2nDs24gZW50cmUgY3JlYXRpdmlkYWQgZSBpbm5vdmFjacOzbgoKICAgICAgICAgIC5jb2wtbGctNQogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzIucG5nJywgYWx0PScnKQoKCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKS5teS01CiAgICAgIGgyICNbc3BhbiAxLjJdIFRpcG9zIGRlIGlubm92YWNpw7NuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yMi5wbmcnLCBhbHQ9JycpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci0xLnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRUNENEZFIikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMjMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBMYSBjbGFzaWZpY2FjacOzbiBkZSBsb3MgdGlwb3MgZGUgaW5ub3ZhY2nDs24gcmVmbGVqYSBsYXMgZGlzdGludGFzIMOhcmVhcyBkb25kZSBsYXMgb3JnYW5pemFjaW9uZXMgcHVlZGVuIGltcGxlbWVudGFyIGNhbWJpb3Mgc2lnbmlmaWNhdGl2b3MuIEVzdGEgZGl2ZXJzaWRhZCBwZXJtaXRlIGFkYXB0YXIgZXN0cmF0ZWdpYXMgYSBuZWNlc2lkYWRlcyBlc3BlY8OtZmljYXMsIG9mcmVjaWVuZG8gc29sdWNpb25lcyBlbmZvY2FkYXMgeSBlZmVjdGl2YXMuCiAgICAgICAgcC5tYi0wIEVsIGFuw6FsaXNpcyBkZXRhbGxhZG8gZGUgZXN0b3MgdGlwb3MgZXMgZnVuZGFtZW50YWwgcGFyYSBjb21wcmVuZGVyIGPDs21vIHNlIGdlbmVyYW4sIGFwbGljYW4geSBtYXhpbWl6YW4gbGFzIG9wb3J0dW5pZGFkZXMgZGUgbWVqb3JhIGVuIHByb2R1Y3RvcywgcHJvY2Vzb3MsIG1lcmNhZG9zIHkgbW9kZWxvcyBvcmdhbml6YWNpb25hbGVzLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy04Lm1iLWxnLTAubWItMwogICAgICAgIExpbmVhVGllbXBvRC5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSIxIiB0aXR1bG89Iklubm92YWNpw7NuIGVuIHByb2R1Y3RvcyBvIHNlcnZpY2lvcyIpIEltcGxpY2EgbGEgY3JlYWNpw7NuIG8gbWVqb3JhIHNpZ25pZmljYXRpdmEgZGUgYmllbmVzIG8gc2VydmljaW9zLCBpbnRyb2R1Y2llbmRvIGZ1bmNpb25hbGlkYWRlcyBub3ZlZG9zYXMsIGVzcGVjaWZpY2FjaW9uZXMgdMOpY25pY2FzIGF2YW56YWRhcyBvIGRpc2XDsW9zIGNlbnRyYWRvcyBlbiBlbCB1c3VhcmlvLiBFamVtcGxvOiBJbmNvcnBvcmFjacOzbiBkZSB0ZWNub2xvZ8OtYXMgc29zdGVuaWJsZXMgZW4gcHJvZHVjdG9zIGVsZWN0csOzbmljb3MuCiAgICAgICAgICBwLnRleHQtc21hbGwobnVtZXJvPSIyIiB0aXR1bG89Iklubm92YWNpw7NuIGVuIHByb2Nlc29zIikgU2UgZW5mb2NhIGVuIG9wdGltaXphciBtw6l0b2RvcyBkZSBwcm9kdWNjacOzbiBvIGRpc3RyaWJ1Y2nDs24sIG1lam9yYW5kbyBsYSBjYWxpZGFkLCBlZmljaWVuY2lhIHkgcmVkdWNpZW5kbyBjb3N0b3Mgb3BlcmF0aXZvcy4gRWplbXBsbzogQXV0b21hdGl6YWNpw7NuIGRlIGNhZGVuYXMgZGUgc3VtaW5pc3RybyBtZWRpYW50ZSBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbC4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjMiIHRpdHVsbz0iSW5ub3ZhY2nDs24gZW4gbW9kZWxvcyBkZSBuZWdvY2lvIikgUmVwcmVzZW50YSB1bmEgdHJhbnNmb3JtYWNpw7NuIGVuIGPDs21vIHVuYSBvcmdhbml6YWNpw7NuIGNyZWEsIGVudHJlZ2EgeSBjYXB0dXJhIHZhbG9yLiBJbmNsdXllIGNhbWJpb3MgZW4gbGEgcHJvcHVlc3RhIGRlIHZhbG9yLCBlc3RydWN0dXJhIGRlIGNvc3RvcyB5IHJlbGFjaW9uZXMgZXN0cmF0w6lnaWNhcy4gRWplbXBsbzogTW9kZWxvcyBkZSBzdXNjcmlwY2nDs24gZW4gc2VydmljaW9zIGRpZ2l0YWxlcy4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjQiIHRpdHVsbz0iSW5ub3ZhY2nDs24gZW4gbWVyY2Fkb3MiKSBTZSBjZW50cmEgZW4gaW50cm9kdWNpciBtw6l0b2RvcyBpbm5vdmFkb3JlcyBwYXJhIGNvbWVyY2lhbGl6YXIgcHJvZHVjdG9zLCB5YSBzZWEgYSB0cmF2w6lzIGRlIG51ZXZvcyBjYW5hbGVzLCBlc3RyYXRlZ2lhcyBkZSBwcmVjaW8gbyBjb211bmljYWNpw7NuIGNvbiBlbCBjbGllbnRlLiBFamVtcGxvOiBVc28gZGUgcmVhbGlkYWQgYXVtZW50YWRhIHBhcmEgcHJvbW9jaW9uYXIgcHJvZHVjdG9zLgogICAgICAuY29sLWxnLTQuY29sLTc6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzI0LnBuZycsIGFsdD0nJykKICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMS5weC01LnB5LTQubWItNShkYXRhLWFvcz0iZmFkZS1sZWZ0IiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0Q2RjVGQSIpCiAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8yNWMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAuY29sLWxnCiAgICAgICAgICBwLm1iLTAgQ2FkYSB0aXBvIGRlIGlubm92YWNpw7NuIHJlc3BvbmRlIGEgZGVzYWbDrW9zIGVzcGVjw61maWNvcyB5IHNlIGFkYXB0YSBhIGxhcyBjYXJhY3RlcsOtc3RpY2FzIGRlbCBlbnRvcm5vIGNvbXBldGl0aXZvLCBwZXJtaXRpZW5kbyBhIGxhcyBvcmdhbml6YWNpb25lcyBwb3NpY2lvbmFyc2UgZGUgbWFuZXJhIGVzdHJhdMOpZ2ljYSBlbiBzdSBzZWN0b3IuCgogICAgaDMgTW9kZWxvcyBkZSBpbm5vdmFjacOzbgogICAgcC5tYi00IExhIGltcGxlbWVudGFjacOzbiBkZSBtb2RlbG9zIGRlIGlubm92YWNpw7NuIHBlcm1pdGUgZXN0cnVjdHVyYXIgeSBnZXN0aW9uYXIgZWwgcHJvY2VzbyBjcmVhdGl2byBkZSBtYW5lcmEgc2lzdGVtw6F0aWNhLiBFc3RvcyBtb2RlbG9zIG9mcmVjZW4gbWFyY29zIHRlw7NyaWNvcyB5IHByw6FjdGljb3MgcXVlIGd1w61hbiBhIGxhcyBvcmdhbml6YWNpb25lcyBlbiBsYSB0cmFuc2Zvcm1hY2nDs24gZGUgaWRlYXMgZW4gc29sdWNpb25lcyByZWFsZXMuCiAgICBJbWFnZW5JbmZvZ3JhZmljYS5jb2xvci1wcmltYXJpby5tYi01CiAgICAgIHRlbXBsYXRlKHYtc2xvdDppbWFnZW4pCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8yNS5zdmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTMoeD0iMzclIiB5PSI4MCUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgSW5ub3ZhY2nDs24gYWJpZXJ0YQogICAgICAgIHAgRXN0ZSBtb2RlbG8gY29tYmluYSBpZGVhcyBpbnRlcm5hcyB5IGV4dGVybmFzIHBhcmEgZ2VuZXJhciB2YWxvciwgcHJvbW92aWVuZG8gbGEgY29sYWJvcmFjacOzbiBlbnRyZSBlbXByZXNhcywgYWNhZGVtaWEgeSBzb2NpZWRhZC4gRWplbXBsbzogRGVzYXJyb2xsbyBkZSB2YWN1bmFzIG1lZGlhbnRlIGNvbnNvcmNpb3MgaW50ZXJuYWNpb25hbGVzLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTMoeD0iMzclIiB5PSI0MCUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgSW5ub3ZhY2nDs24gY2VycmFkYQogICAgICAgIHAgU2UgZW5mb2NhIGVuIHByb2Nlc29zIGludGVybm9zLCBjb250cm9sYW5kbyB0b2RvIGVsIGNpY2xvIGRlIGlubm92YWNpw7NuIHBhcmEgcHJvdGVnZXIgbGEgcHJvcGllZGFkIGludGVsZWN0dWFsIHkgZGVzYXJyb2xsYXIgY2FwYWNpZGFkZXMgZXhjbHVzaXZhcy4gRWplbXBsbzogSW52ZXN0aWdhY2nDs24gZmFybWFjw6l1dGljYSBwcm9waWEgcGFyYSBudWV2b3MgbWVkaWNhbWVudG9zLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTMoeD0iNDclIiB5PSIyNCUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgSW5ub3ZhY2nDs24gaW5jcmVtZW50YWwKICAgICAgICBwIEJ1c2NhIG1lam9yYXMgY29udGludWFzIHkgZ3JhZHVhbGVzIGVuIHByb2R1Y3Rvcywgc2VydmljaW9zIG8gcHJvY2Vzb3MsIG1pbmltaXphbmRvIHJpZXNnb3MgeSBtYXhpbWl6YW5kbyBlZmljaWVuY2lhLiBFamVtcGxvOiBNZWpvcmEgZGUgZW1wYXF1ZXMgY29uIG1hdGVyaWFsZXMgYmlvZGVncmFkYWJsZXMuCiAgICAgIC50YXJqZXRhLmJnLXdoaXRlLnAtMyh4PSI1MyUiIHk9IjI0JSIgbnVtZXJvPSIrIikKICAgICAgICAuaDUubWItMiBJbm5vdmFjacOzbiByYWRpY2FsCiAgICAgICAgcCBJbnRyb2R1Y2UgY2FtYmlvcyBkaXNydXB0aXZvcyBxdWUgdHJhbnNmb3JtYW4gc2VjdG9yZXMgY29tcGxldG9zLiBSZXF1aWVyZSBhbHRhcyBpbnZlcnNpb25lcyB5IHRvbGVyYW5jaWEgYWwgcmllc2dvLiBFamVtcGxvOiBEZXNhcnJvbGxvIGRlIHRlY25vbG9nw61hIGN1w6FudGljYSBhcGxpY2FkYSBhIGxhIGNvbXB1dGFjacOzbi4KICAgICAgLnRhcmpldGEuYmctd2hpdGUucC0zKHg9IjYzJSIgeT0iNDAlIiBudW1lcm89IisiKQogICAgICAgIC5oNS5tYi0yIExlYW4gU3RhcnR1cAogICAgICAgIHAgTW9kZWxvIGVuZm9jYWRvIGVuIHN0YXJ0dXBzICwgcXVlIHByaW9yaXphIGV4cGVyaW1lbnRhY2nDs24gcsOhcGlkYSBtZWRpYW50ZSBwcm9kdWN0b3MgbcOtbmltb3MgdmlhYmxlcyAoTVZQKSB5IHZhbGlkYWNpw7NuIGNvbnRpbnVhIGRlIGhpcMOzdGVzaXMuIEVqZW1wbG86IEFwcHMgbGFuemFkYXMgY29uIGZ1bmNpb25hbGlkYWRlcyBiw6FzaWNhcyBwYXJhIHBydWViYXMgZGUgbWVyY2Fkby4KICAgICAgLnRhcmpldGEuYmctd2hpdGUucC0zKHg9IjYyJSIgeT0iODAlIiBudW1lcm89IisiKQogICAgICAgIC5oNS5tYi0yIFRyaXBsZSBIw6lsaWNlCiAgICAgICAgcCBJbnRlZ3JhIHVuaXZlcnNpZGFkLCBlbXByZXNhIHkgZ29iaWVybm8sIGZvbWVudGFuZG8gc2luZXJnaWFzIGVudHJlIGludmVzdGlnYWNpw7NuIGFjYWTDqW1pY2EsIGFwbGljYWNpb25lcyBwcsOhY3RpY2FzIHkgcG9sw610aWNhcyBww7pibGljYXMuIEVqZW1wbG86IFBhcnF1ZXMgdGVjbm9sw7NnaWNvcyBwYXJhIHByb21vdmVyIGxhIGlubm92YWNpw7NuIHJlZ2lvbmFsLgogICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby00Lm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBwLm1iLTQgTGEgc2VsZWNjacOzbiBkZSB1biBtb2RlbG8gYWRlY3VhZG8gZGVwZW5kZSBkZSBsb3Mgb2JqZXRpdm9zIGVzdHJhdMOpZ2ljb3MsIGxvcyByZWN1cnNvcyBkaXNwb25pYmxlcyB5IGVsIGNvbnRleHRvIGRlIGltcGxlbWVudGFjacOzbi4gQ2FkYSBlbmZvcXVlIGFwb3J0YSBoZXJyYW1pZW50YXMgcGFyYSBhYm9yZGFyIGRlc2Fmw61vcyBlc3BlY8OtZmljb3MgeSBmb21lbnRhciBlbCBkZXNhcnJvbGxvIHNvc3RlbmlibGUuCiAgICAgICAgCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgICAgICAuY29sLWxnLTkKCiAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5zaGFkb3ctc29mdC5weS00LnB4LWxnLTUKICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1hcm91bmQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLW1kLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvYmctaWNvbm8tcGRmLnN2ZyIsIHN0eWxlPSJ3aWR0aDogOTBweDsiKQogICAgICAgICAgICAgICAgLmNvbAogICAgICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgICAgICAgIC5jb2wubWItMy5tYi1zbS0wCiAgICAgICAgICAgICAgICAgICAgICBoMy5tYi0xIMK/UXXDqSB0aXBvcyBkZSBpbm5vdmFjacOzbiBleGlzdGVuPwogICAgICAgICAgICAgICAgICAgICAgcCBQYXJhIGFtcGxpYXIgbG9zIGNvbm9jaW1pZW50b3MgZW4gbG9zIHRlbWFzIGRlIGlubm92YWNpw7NuIHF1ZSBoYXMgZXN0dWRpYWRvLCBsZSBzdWdlcmltb3MgZXhwbG9yYXIgZWwgc2lndWllbnRlIHbDrWRlbzoKICAgICAgICAgICAgICAgICAgICAuY29sLXNtLWF1dG8KICAgICAgICAgICAgICAgICAgICAgIGEuYm90b24uY29sb3ItYWNlbnRvLWJvdG9uZXMoaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS84c0p2ZjBOU2s5Zz9zaT1uWjYyWmo5NHNya0Nnc0o5IiB0YXJnZXQ9Il9ibGFuayIpCiAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gVmVyIHZpZGVvCiAgICAgICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LXJpZ2h0CgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMiBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICAvLy0gUmVmZXJlbmNpYSBjb24gZW5sYWNlIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMTY0NzIwIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQ2hlc2Jyb3VnaCwgSC4gKDIwMjApLiBJbm5vdmFjacOzbiBhYmllcnRhOiBOdWV2b3MgaW1wZXJhdGl2b3MgcGFyYSBsYSBjcmVhY2nDs24geSBlbCBhcHJvdmVjaGFtaWVudG8gZGUgbGEgdGVjbm9sb2fDrWEuIEhhcnZhcmQgQnVzaW5lc3MgUHJlc3MuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjE4MTAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDb3Jkb3bDqXMgVG9ycmVzIEfDs21leiBkZSBDw6FkaXosIEwuICgyMDIyKS4gSW5kaWNhZG9yZXMgZGUgaW5ub3ZhY2nDs24gb3JnYW5pemFjaW9uYWw6IENvbmNlcHRvcyB5IGFwbGljYWNpb25lcy4gRWRpdG9yaWFsIEVTSUMuCgogICAgICAgICAgICAvLy0gUmVmZXJlbmNpYXMgc2luIGVubGFjZQogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBCYXF1ZXJpem8gw4FsYXZhLCBMLiBWLiwgQ2hhbiBDaGksIEQuLCAmIEhlcm7DoW5kZXogUmF2ZWxsLCBKLiAoMjAyMikuIFRyYW5zZm9ybWFjacOzbiBkaWdpdGFsIGVuIGVkdWNhY2nDs24gc3VwZXJpb3IgYSB0cmF2w6lzIGRlIG1ldG9kb2xvZ8OtYXMgw6FnaWxlcy4gUklFRC4gUmV2aXN0YSBJYmVyb2FtZXJpY2FuYSBkZSBFZHVjYWNpw7NuIGEgRGlzdGFuY2lhLCAyNSgyKSwgMTk3LTIyMS4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2Jvb2suc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBzcGFuIENhYmVyYSBGYXlvcywgSS4gKDIwMjQpLiBJbm5vdmFjacOzbiBlZHVjYXRpdmEgZW4gbGEgZXJhIGRpZ2l0YWw6IFJldG9zIHkgb3BvcnR1bmlkYWRlcy4gRWRpdG9yaWFsIFPDrW50ZXNpcy4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2Jvb2suc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBzcGFuIENhYnJlcmEgUGFuaWFndWEsIEMuIEYuICgyMDIwKS4gTWV0b2RvbG9nw61hIFRSSVogcGFyYSBsYSBpbm5vdmFjacOzbjogUHJpbmNpcGlvcyB5IGFwbGljYWNpb25lcy4gRWRpdG9yaWFsIFVuaXZlcnNpZGFkIGRlbCBQYWPDrWZpY28uCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBDYXN0cm8gTWFydMOtbmV6LCBFLiwgJiBGZXJuw6FuZGV6IGRlIEx1Y2lvLCBJLiAoMjAyMCkuIElubm92YWNpw7NuIGFiaWVydGE6IFJldG9zIHkgb3BvcnR1bmlkYWRlcyBwYXJhIGxhIGVtcHJlc2EuIEVkaXRvcmlhbCBVT0MuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBDYXZhem9zIEFycm95bywgSi4gKDIwMjEpLiBDcmVhdGl2aWRhZCBlIGlubm92YWNpw7NuIHNvY2lhbDogQ29uY2VwdG9zLCBwcm9jZXNvcyB5IGRlc2Fmw61vcy4gUmV2aXN0YSBJYmVyb2FtZXJpY2FuYSBkZSBDb250YWR1csOtYSwgRWNvbm9tw61hIHkgQWRtaW5pc3RyYWNpw7NuLCAxMCgxOSksIDQzLTU5LgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIHNwYW4gRG9yYWRvIEdveWVzLCBKLiwgU8OhbmNoZXogTMOzcGV6LCBDLiwgJiBadWx1YWdhIFRydWppbGxvLCBBLiAoMjAyMCkuIElubm92YWNpw7NuIHNvY2lhbCB5IGRlc2Fycm9sbG8gc29zdGVuaWJsZSBlbiBDb2xvbWJpYS4gUmV2aXN0YSBkZSBFc3R1ZGlvcyBSZWdpb25hbGVzLCAxMTcsIDEyMS0xNDcuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBHYXJjw61hIEN1ZXZhcywgUS4sIFJvamFzIFJpdmVyYSwgRC4sICYgT3NwaW5hIE1lasOtYSwgSi4gKDIwMjApLiBFY29zaXN0ZW1hcyBkZSBpbm5vdmFjacOzbiB5IGRlc2Fycm9sbG8gbG9jYWwgc29zdGVuaWJsZS4gQ3VhZGVybm9zIGRlIEFkbWluaXN0cmFjacOzbiwgMzMoNTgpLCA4NS0xMDIuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBHdWlsZXJhLCBMLiwgJiBHYXJyZWxsLCBBLiAoMjAyMSkuIENyZWF0aXZpZGFkIGUgaW5ub3ZhY2nDs246IE1vZGVsb3MsIG3DqXRvZG9zIHkgaGVycmFtaWVudGFzLiBFZGl0b3JpYWwgVU9DLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIHNwYW4gSGVycmVyYSBMZW11cywgQS4sICYgTGF6Y2FubyBIZXJyZXJhLCBDLiAoMjAyMCkuIElubm92YWNpw7NuIGFiaWVydGE6IENsYXZlcyBwYXJhIHVuYSBlc3RyYXRlZ2lhIGV4aXRvc2EuIEVkaXRvcmlhbCBFU0lDLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIHNwYW4gSGVydsOhcy1Hw7NtZXosIEMuLCBDYWJlcm8gRmF5b3MsIEkuLCAmIFRlamFkYSBHYXJpdGFubywgRS4gKDIwMjQpLiBJbm5vdmFjacOzbiBlbiBsb3MgcHJvY2Vzb3MgZGUgZW5zZcOxYW56YS1hcHJlbmRpemFqZTogRWwgcGFwZWwgZGUgbGFzIHRlY25vbG9nw61hcyBkaWdpdGFsZXMuIEVkaXRvcmlhbCBTw61udGVzaXMuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBKdWFqYmlveSBPdGVybywgSi4sIE1hcnTDrW4gQ3JpdGlracOhbiwgTC4sICYgTW9yYWxlcyBDZXZhbGxvcywgQS4gKDIwMjEpLiBJbm5vdmFjacOzbiB5IGV4cGVyaWVuY2lhIGRlbCB1c3VhcmlvOiBQcmluY2lwaW9zIHkgYXBsaWNhY2lvbmVzLiBFZGl0b3JpYWwgVU5BTS4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlL0xjc0xpNVhoYjRZP3NpPVRSRTRYRVpOZlBFSGtNSVciIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBFQUZJVC0gQ2VudHJvIGRlIEV4Y2VsZW5jaWEgW0p1YW4gRGllZ28gUmFtb3NdLiAoMjAxMywgNiBkZSBhZ29zdG8pLiBDaWNsbyBkZSBDcmVhdGl2aWRhZCAtIENyZWF0aXZpZGFkIHZzLiBpbm5vdmFjacOzbgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8veW91dHUuYmUvOHNKdmYwTlNrOWc/c2k9blo2MlpqOTRzcmtDZ3NKOSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIE5lZ29jaW9zIEVuIFR1IE11bmRvLiBbTmVnb2Npb3MgZW4gVG1dLiAoMjAxOCwgMjEgZGUgbWF5bykuIMK/UXXDqSB0aXBvcyBkZSBpbm5vdmFjacOzbiBleGlzdGVuPwoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQo="},null]}